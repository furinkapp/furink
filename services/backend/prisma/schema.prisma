generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// A user registered with fur.ink.
model User {
  id       String @id @default(uuid())
  username String @unique

  clientUser ClientUser?
  profile    UserProfile?

  posts   Post[]
  replies PostReply[]
  likes   PostLike[]
  tags    UserProfileTag[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  clientUserId String?
}

/// Stores sensitive user data.
model ClientUser {
  id String @id

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  email       String @unique
  supabaseUid String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// A user's profile.
model UserProfile {
  userId String @id
  user   User   @relation(fields: [userId], references: [id])

  integrations UserProfileIntegration[]

  displayName String
  bio         String?
  avatarUrl   String?
  bannerUrl   String?
  websiteUrl  String?
  timezone    String?
  country     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// A user's integration with a third-party service.
model UserProfileIntegration {
  id String @id @default(uuid())

  integrationId String
  integration   UserProfileIntegrationType @relation(fields: [integrationId], references: [id])

  content String
  link    String?

  profile       UserProfile @relation(fields: [userProfileId], references: [userId])
  userProfileId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// A type of profile integration.
model UserProfileIntegrationType {
  id          String @id
  label       String
  description String

  integrations UserProfileIntegration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProfileTag {
  userId String
  user   User   @relation(fields: [userId], references: [id])

  tagId String
  tag   ProfileTag @relation(fields: [tagId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, tagId])
}

//// A post made by a user.
model Post {
  id String @id @default(uuid())

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  title   String
  content String

  attachments PostAttachment[]
  replies     PostReply[]
  likes       PostLike[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//// A reply to a post.
model PostReply {
  id String @id @default(uuid())

  content String

  parent   Post?   @relation(fields: [parentId], references: [id])
  parentId String? @map("postId")

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// A like on a post.
model PostLike {
  postId String
  post   Post   @relation(fields: [postId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@id([postId, userId])
}

/// An attachment to a post.
model PostAttachment {
  id String @id @default(uuid())

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  url String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// A tag that can be applied to a user's profile.
model ProfileTag {
  id String @id @default(uuid())

  name  String
  color String

  appliedProfiles UserProfileTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
